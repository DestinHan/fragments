name: cd

on:
  push:
    tags:
      - 'v*'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: fragments
  ECS_CLUSTER: fragments
  ECS_SERVICE: fragments
  TASK_DEF: fragments-definition.json
  CONTAINER_NAME: fragments

jobs:
  push-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.meta.outputs.image-uri }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ env.ECR_REPOSITORY }}
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      - name: Set image URI output
        id: meta
        run: |
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}" >> $GITHUB_OUTPUT

  deploy-ecs:
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Render task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEF }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.push-to-ecr.outputs.image-uri }}
          environment-variables: |
            LOG_LEVEL=info
            AUTH_STRATEGY=http
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_S3_BUCKET_NAME=fragments-seunghoonhan

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
